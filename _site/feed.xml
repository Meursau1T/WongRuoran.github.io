<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>无人之境</title>
    <description>&quot;一些scheme，一些c，一些算法，一些想法&quot;
</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Tue, 11 Dec 2018 17:19:56 +0800</pubDate>
    <lastBuildDate>Tue, 11 Dec 2018 17:19:56 +0800</lastBuildDate>
    <generator>Jekyll v3.8.5</generator>
    
      <item>
        <title>素数筛</title>
        <description>&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;bool prime[10000001];  // 建立数组，0为合数，1为素数
void pri(int end){
  memset(prime,1,sizeof(prime));  // 初始化数组全为素数
  prime[0]=prime[1]=0;            // 排除0和1两个特殊值
  for(int i=2;i*i&amp;lt;=end;i++){      // 从2开始数，遇到一个素数，就把它的所有倍数标记为合数
    if(prime[i]){
      for(int j=i*i;j&amp;lt;=end;j=i+j) // 用 j = i*i 更加高效
        prime[j]=0;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;原理是素数的所有倍数都是合数。&lt;/p&gt;

&lt;p&gt;这种方法适用于已知要判定的数的范围且多次判定的情况，如果判定次数很少，不比普通算法快。&lt;/p&gt;
</description>
        <pubDate>Mon, 10 Dec 2018 08:00:01 +0800</pubDate>
        <link>http://localhost:4000/%E7%AE%97%E6%B3%95/2018/12/10/%E7%B4%A0%E6%95%B0%E7%AD%9B.html</link>
        <guid isPermaLink="true">http://localhost:4000/%E7%AE%97%E6%B3%95/2018/12/10/%E7%B4%A0%E6%95%B0%E7%AD%9B.html</guid>
        
        
        <category>算法</category>
        
      </item>
    
      <item>
        <title>程序员的工具</title>
        <description>&lt;p&gt;前几天做了一个小程序，可以离线网页及其子页面。在程序中需要一个检索URL的功能，我选择了使用正则表达式，结果这就成了问题的开始。&lt;/p&gt;

&lt;p&gt;正则表达式是怎样的东西？如下：&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;(https?|ftp|file)://[-A-Za-z0-9+&amp;amp;@#/%?=~_|!:,.;]+[-A-Za-z0-9+&amp;amp;@#/%=~_|]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;不用试图去理解了，这个东西可读性极低，就算是写出这团怪物的人也得花点心思去理解自己过去想要做什么。&lt;/p&gt;

&lt;p&gt;就是因为一开始执着于使用正则表达式，我怎么都无法完美地匹配到自己想要的字符串，总会有一些不想要的奇奇怪怪的字符串溜进来，把程序搞得一团糟。最后我放弃了正则表达式，自己写了个判断字符串的函数，程序一下子就正常运行了。&lt;/p&gt;

&lt;p&gt;当然了，可能会有人说，这完全是因为我不会用正则表达式，在会用的人手里正则表达式工作得很好。在程序刚刚被写出来的时候，的确如此，但几个月甚至几年以后呢？当环境改变，需要修改这个表达式的时候，估计负修改的程序员会感到”A pain in the ass”。因为这东西可读性太低了！程序不是一次性的，是需要维护的。站在这个角度，正则表达式是一个很糟糕的工具。有一句话说得很好：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Some people, when confronted with a problem, think “I know, I’ll use regular expressions.” Now they have two problems.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;设计糟糕的工具不止正则表达式一个，它们总有两个共通点：难用、功能强大。&lt;/p&gt;

&lt;p&gt;会有人说，因为这强大的功能，我们去牺牲一下，努力学习这些工具是很值得的。但当一个强大的工具会因为难用给你造成更多麻烦的时候，我会选择用好用且易懂但稍稍繁琐一点点的工具，毕竟我还知道我在干什么，一切都在我的掌控之中。&lt;/p&gt;

&lt;p&gt;linux下很多工具都是这样，功能复杂而不友好，开发者也是用户，用户友好的工具才会是多数人的选择。不然就不会有那么多人选择IDE而不是强大而复杂的VIM了。&lt;/p&gt;

</description>
        <pubDate>Mon, 10 Dec 2018 08:00:01 +0800</pubDate>
        <link>http://localhost:4000/%E9%9A%8F%E6%83%B3/2018/12/10/Some-Words-About-Tools.html</link>
        <guid isPermaLink="true">http://localhost:4000/%E9%9A%8F%E6%83%B3/2018/12/10/Some-Words-About-Tools.html</guid>
        
        
        <category>随想</category>
        
      </item>
    
  </channel>
</rss>
