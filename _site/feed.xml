<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>无人之境</title>
    <description>&quot;一些scheme，一些c，一些算法，一些想法&quot;
</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Tue, 11 Dec 2018 22:47:11 +0800</pubDate>
    <lastBuildDate>Tue, 11 Dec 2018 22:47:11 +0800</lastBuildDate>
    <generator>Jekyll v3.8.5</generator>
    
      <item>
        <title>openSUSE内核损坏后启动并修复内核</title>
        <description>&lt;p&gt;如果你的系统内核全部坏掉，怎么办？&lt;/p&gt;

&lt;h3 id=&quot;1下载rescue-cd&quot;&gt;1.下载rescue CD&lt;/h3&gt;

&lt;p&gt;liveCD或者DVD都可以，无所谓的。&lt;/p&gt;

&lt;h3 id=&quot;2进入rescue-cd选单选择从硬盘启动&quot;&gt;2.进入rescue CD选单，选择从硬盘启动&lt;/h3&gt;

&lt;p&gt;选择内核，这里要选择旧版本内核。&lt;/p&gt;

&lt;p&gt;然后会要求选择一个字符串（这个东西就相当于&lt;code class=&quot;highlighter-rouge&quot;&gt;root=&lt;/code&gt;那串字符串，可以在我的另一篇“Grub手动引导系统”里了解到），如果这是第一次操作，选第一个，如果不是，选后面的，不要重复选择，然后就可以进入系统。&lt;/p&gt;

&lt;h3 id=&quot;3删除boot下的内核重新安装内核&quot;&gt;3.删除/boot下的内核，重新安装内核&lt;/h3&gt;

&lt;p&gt;保险起见，我将vmlinuz和initrd文件都删了，然后重新安装了&lt;code class=&quot;highlighter-rouge&quot;&gt;kernel&lt;/code&gt;开头的软件，在回来看/boot文件夹，发现新的vmlinuz已经出现了。&lt;/p&gt;

&lt;p&gt;好了，现在你可以放心重启了，系统又是你的了。&lt;/p&gt;
</description>
        <pubDate>Tue, 11 Dec 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/linux/2018/12/11/openSUSE%E4%BF%AE%E5%A4%8D%E5%86%85%E6%A0%B8.html</link>
        <guid isPermaLink="true">http://localhost:4000/linux/2018/12/11/openSUSE%E4%BF%AE%E5%A4%8D%E5%86%85%E6%A0%B8.html</guid>
        
        
        <category>Linux</category>
        
      </item>
    
      <item>
        <title>用Grub2手动引导系统</title>
        <description>&lt;p&gt;使用Linux总是不可避免地会遇到引导问题，因此学会使用Grub的命令行模式非常重要。下面是用Grub2的命令行模式启动系统的步骤：&lt;/p&gt;

&lt;h3 id=&quot;1找到你的根分区&quot;&gt;1.找到你的根分区&lt;/h3&gt;

&lt;p&gt;输入&lt;code class=&quot;highlighter-rouge&quot;&gt;cat &lt;/code&gt;，按TAB，系统会列出所有的分区，如(h0,gpt1)等，利用&lt;code class=&quot;highlighter-rouge&quot;&gt;ls (hX,gptY)&lt;/code&gt;这个命令，一个个尝试每一个分区，最后肯定能找到你的根分区。&lt;/p&gt;

&lt;p&gt;如果你的/boot分区是独立的，那么用同样的方法去找到/boot分区。&lt;/p&gt;

&lt;p&gt;/boot分区下一般会有grub文件夹，还有几个vmlinuz开头的文件，而/分区则有bin、usr、tmp等文件夹，都很好辨识。&lt;/p&gt;

&lt;h3 id=&quot;2如果在rescue模式加载相应的模组&quot;&gt;2.如果在rescue模式，加载相应的模组&lt;/h3&gt;

&lt;p&gt;我们假设根分区是(hdX,gptY)，输入以下命令：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;set prefix=(hdX,gptY)/boot/grub  
insmod (hdX,gptY)/boot/grub/linux.mod  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;如果你的/boot分区是独立的，那么从上面的路径中去掉&lt;code class=&quot;highlighter-rouge&quot;&gt;/boot&lt;/code&gt;部分&lt;/p&gt;

&lt;h3 id=&quot;3选中linux内核和initrd文件&quot;&gt;3.选中linux内核和initrd文件&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;set root=(hdX,gptY)
linuxefi /boot/vmlinuz-4.19.7-1-default root=UUID=20cdc128-d66a-45ab-8033-be3efaa70d2b
initrdefi /boot/initrd-4.19.7-1-default
boot

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;如果/boot独立，去掉&lt;code class=&quot;highlighter-rouge&quot;&gt;/boot&lt;/code&gt;部分&lt;/p&gt;

&lt;p&gt;有可能你没有linux和initrd这两个命令，取而代之的是linux和initrd，没关系，用那个就对了。&lt;/p&gt;

&lt;p&gt;另外一个需要关注的就是第二行中的&lt;code class=&quot;highlighter-rouge&quot;&gt;root=&lt;/code&gt;部分，这一长串字母是通过&lt;code class=&quot;highlighter-rouge&quot;&gt;cat (hdX,gptY)/etc/fstab&lt;/code&gt;得到的。运行这个命令后你会看到类似下面的输出：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;UUID=20cdc128-d66a-45ab-8033-be3efaa70d2b  /                       btrfs  defaults                      0  0
UUID=20cdc128-d66a-45ab-8033-be3efaa70d2b  /boot/grub2/x86_64-efi  btrfs  subvol=/@/boot/grub2/x86_64-efi  0  0
UUID=20cdc128-d66a-45ab-8033-be3efaa70d2b  /boot/grub2/i386-pc     btrfs  subvol=/@/boot/grub2/i386-pc  0  0
UUID=61D7-34F0                             /boot/efi               vfat   codepage=936                  0  0
UUID=20cdc128-d66a-45ab-8033-be3efaa70d2b  /.snapshots             btrfs  subvol=/@/.snapshots          0  0
UUID=20cdc128-d66a-45ab-8033-be3efaa70d2b  /var                    btrfs  subvol=/@/var                 0  0
UUID=20cdc128-d66a-45ab-8033-be3efaa70d2b  /usr/local              btrfs  subvol=/@/usr/local           0  0
UUID=20cdc128-d66a-45ab-8033-be3efaa70d2b  /tmp                    btrfs  subvol=/@/tmp                 0  0
UUID=20cdc128-d66a-45ab-8033-be3efaa70d2b  /srv                    btrfs  subvol=/@/srv                 0  0
UUID=20cdc128-d66a-45ab-8033-be3efaa70d2b  /root                   btrfs  subvol=/@/root                0  0
UUID=20cdc128-d66a-45ab-8033-be3efaa70d2b  /opt                    btrfs  subvol=/@/opt                 0  0
UUID=c437c868-4b9d-4513-b5a2-24595d26a478  /home                   xfs    defaults                      0  0
UUID=c3f9cd03-4f1d-4de8-a44d-c621401b87b1  swap                    swap   defaults                      0  0

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;根分区前面的字符串就是我们要的。如果是&lt;code class=&quot;highlighter-rouge&quot;&gt;/dev/sdXX&lt;/code&gt;这一类的字符串，处理方法是一样的。&lt;/p&gt;

&lt;p&gt;输入&lt;code class=&quot;highlighter-rouge&quot;&gt;boot&lt;/code&gt;命令并回车后，就可以启动了。启动后赶快找工具修复grub吧。&lt;/p&gt;

&lt;h3 id=&quot;如果你的运气很差&quot;&gt;如果你的运气很差……&lt;/h3&gt;

&lt;p&gt;有时候事情不会像上面一样顺利，&lt;strong&gt;比如我&lt;/strong&gt;，在linux那一步被提示&lt;code class=&quot;highlighter-rouge&quot;&gt;vmlinuz can't be read&lt;/code&gt;，原因很简单，内核坏了，目录下一般有旧版本的内核，拿来试试，说不定可以用。&lt;/p&gt;

&lt;p&gt;然而，运气这个东西，总是可以更差，&lt;strong&gt;比如我&lt;/strong&gt;，所有的内核都坏掉了，这可如何是好呢？我会放到另一篇文章里面讲。&lt;/p&gt;
</description>
        <pubDate>Tue, 11 Dec 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/linux/2018/12/11/Grub2%E6%89%8B%E5%8A%A8%E5%BC%95%E5%AF%BC%E7%B3%BB%E7%BB%9F.html</link>
        <guid isPermaLink="true">http://localhost:4000/linux/2018/12/11/Grub2%E6%89%8B%E5%8A%A8%E5%BC%95%E5%AF%BC%E7%B3%BB%E7%BB%9F.html</guid>
        
        
        <category>Linux</category>
        
      </item>
    
      <item>
        <title>素数筛</title>
        <description>&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;bool prime[10000001];  // 建立数组，0为合数，1为素数
void pri(int end){
  memset(prime,1,sizeof(prime));  // 初始化数组全为素数
  prime[0]=prime[1]=0;            // 排除0和1两个特殊值
  for(int i=2;i*i&amp;lt;=end;i++){      // 从2开始数，遇到一个素数，就把它的所有倍数标记为合数
    if(prime[i]){
      for(int j=i*i;j&amp;lt;=end;j=i+j) // 用 j = i*i 更加高效
        prime[j]=0;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;原理是素数的所有倍数都是合数。&lt;/p&gt;

&lt;p&gt;这种方法适用于已知要判定的数的范围且多次判定的情况，如果判定次数很少，不比普通算法快。&lt;/p&gt;
</description>
        <pubDate>Mon, 10 Dec 2018 08:00:01 +0800</pubDate>
        <link>http://localhost:4000/%E7%AE%97%E6%B3%95/2018/12/10/%E7%B4%A0%E6%95%B0%E7%AD%9B.html</link>
        <guid isPermaLink="true">http://localhost:4000/%E7%AE%97%E6%B3%95/2018/12/10/%E7%B4%A0%E6%95%B0%E7%AD%9B.html</guid>
        
        
        <category>算法</category>
        
      </item>
    
      <item>
        <title>程序员的工具</title>
        <description>&lt;p&gt;前几天做了一个小程序，可以离线网页及其子页面。在程序中需要一个检索URL的功能，我选择了使用正则表达式，结果这就成了问题的开始。&lt;/p&gt;

&lt;p&gt;正则表达式是怎样的东西？如下：&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;(https?|ftp|file)://[-A-Za-z0-9+&amp;amp;@#/%?=~_|!:,.;]+[-A-Za-z0-9+&amp;amp;@#/%=~_|]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;不用试图去理解了，这个东西可读性极低，就算是写出这团怪物的人也得花点心思去理解自己过去想要做什么。&lt;/p&gt;

&lt;p&gt;就是因为一开始执着于使用正则表达式，我怎么都无法完美地匹配到自己想要的字符串，总会有一些不想要的奇奇怪怪的字符串溜进来，把程序搞得一团糟。最后我放弃了正则表达式，自己写了个判断字符串的函数，程序一下子就正常运行了。&lt;/p&gt;

&lt;p&gt;当然了，可能会有人说，这完全是因为我不会用正则表达式，在会用的人手里正则表达式工作得很好。在程序刚刚被写出来的时候，的确如此，但几个月甚至几年以后呢？当环境改变，需要修改这个表达式的时候，估计负修改的程序员会感到”A pain in the ass”。因为这东西可读性太低了！程序不是一次性的，是需要维护的。站在这个角度，正则表达式是一个很糟糕的工具。有一句话说得很好：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Some people, when confronted with a problem, think “I know, I’ll use regular expressions.” Now they have two problems.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;设计糟糕的工具不止正则表达式一个，它们总有两个共通点：难用、功能强大。&lt;/p&gt;

&lt;p&gt;会有人说，因为这强大的功能，我们去牺牲一下，努力学习这些工具是很值得的。但当一个强大的工具会因为难用给你造成更多麻烦的时候，我会选择用好用且易懂但稍稍繁琐一点点的工具，毕竟我还知道我在干什么，一切都在我的掌控之中。&lt;/p&gt;

&lt;p&gt;linux下很多工具都是这样，功能复杂而不友好，开发者也是用户，用户友好的工具才会是多数人的选择。不然就不会有那么多人选择IDE而不是强大而复杂的VIM了。&lt;/p&gt;

</description>
        <pubDate>Mon, 10 Dec 2018 08:00:01 +0800</pubDate>
        <link>http://localhost:4000/%E9%9A%8F%E6%83%B3/2018/12/10/Some-Words-About-Tools.html</link>
        <guid isPermaLink="true">http://localhost:4000/%E9%9A%8F%E6%83%B3/2018/12/10/Some-Words-About-Tools.html</guid>
        
        
        <category>随想</category>
        
      </item>
    
  </channel>
</rss>
